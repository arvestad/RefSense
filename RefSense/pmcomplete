#! /usr/bin/perl -w

=pod

=head1 NAME

pmcomplete - Interaction with shell completion system

=head1 SYNOPSIS

    pmcomplete <progname> <string> <string>

=head1 DESCRIPTION

This utility is intended to be used by the completion system in BASH
and in conjunction with the command pubmed. Typical usage is instruct
BASH as follows:

   complete -C pmcomplete pmid2text pmid2www pmid2bibtex

After a pubmed-search, the result is cached in a file in the user's
home directory and used to filter out candidate PMID:s.

For example:

   $ pubmed arvestad savolainen
   11005171   Savolainen P, Arvestad L, Lundeberg J (2000) "A novel method
              for forensic DNA investigations: repeat-type sequence analysis
              of tandemly repeated mtDNA in domestic dogs." J Forensic
              Sci 45(5), 990-999

   10742040   Savolainen P, Arvestad L, Lundeberg J (2000) "mtDNA tandem
              repeats in domestic dogs and wolves: mutation mechanism studied
              by analysis of the sequence of imperfect repeats." Mol Biol
              Evol 17(4), 474-488

Now trying to retrieve the abstract for the paper in J Forensic Sci, we ask
for completion on the text fragment 'for':

   > pmid2text -a for<tab>

This will result in the 'for' string to be converted to 11005171, the proper
PMID. Completion is done on all parts of the search result from pubmed,
including PMID, author names, journal name, and title.

A confusing situation may occur if one possible completion is a suffix
of another valid completion. Consider the case when you are asking for
completion on 'membr' and get the two alternatives 'transmembrane' and
'membrane'. If the latter word is exactly what you want, you will have
to force the finished completion by entering a dollar sign, '\$', to
signal that this is indeed a completed word.

=head1 SEE ALSO

See also home page at http://www.nada.kth.se/~arve/refsense.

=cut

if (scalar(@ARGV) < 2) {
  exit(0);
}

my $fragment=$ARGV[1];		# The little string to match
if (length($fragment) == 0) {	# Nothing to match
  exit(0);
}

open(F, "<$ENV{HOME}/.biblio")
  || exit(0);

my $pmid = undef;		# Last read PMID
my $str = undef;		# Current entry string
my $have_match = 0;		# Record if the entry has matched or not

my @pmids = ();			# Stored matching pmids here, in order
my %entry = ();			# Stored matched entries here.
my %frags = ();			# Stored text fragments that match. No spaces (probably?)

while (<F>) {
  if (m/^\s*$/) {		# Empty line
    if ($have_match == 1) {
      push @pmids, $pmid;
      $entry{$pmid} = $str;
      $have_match = 0;		# Restore
    }

  } elsif (m/^\s{0,10}[+-]?(\d+)\s+.*$/) { # New entry 
    $pmid = $1;
    $str = $_;
  } else {			# Continue old entry
    $str .= $_;
  }

  if (m/$fragment/i) {		# The entry matches! Case insensitive
    $have_match = 1;
    while (m/(\w*$fragment\w*)/gi) { # See what is matching
      push @{$frags{lc($1)}}, $pmid;	# Save that text fragment
    }
  }
}

if (scalar(@pmids) == 0) {	
  # Nothing! No match at all
}  elsif (scalar(@pmids) == 1	# We are done if (1) unique entry OR
	  || scalar(keys(%frags)) == 1) { #      (2) unique text match
  print join(",", @pmids);
} else {			# Show what you've got
  foreach my $f (keys(%frags)) {
    my $n = scalar(@{$frags{$f}});
    if ($n > 1) {
      print "$f($n)\n";
    } else {
      print $f, "\n";
    }
  }
}
