#! /usr/bin/perl -w

#use lib "/home/httpd/biblio";
use CGI;
use CGI::Carp qw(fatalsToBrowser);
$CGI::POST_MAX=1024 * 100;	# max 100K posts

use PubMed;
use PMCache;

use Globals;
$debug=undef;

# For ref persistence
my $BiblioCookieName = 'BiblioRefs';

# Take an article into a form to compose a web search
my $common_words = {
		    'a' => undef,
		    'about' => undef,
		    'above' => undef,
		    'across' => undef,
		    'after' => undef,
		    'afterwards' => undef,
		    'again' => undef,
		    'against' => undef,
		    'all' => undef,
		    'almost' => undef,
		    'alone' => undef,
		    'along' => undef,
		    'already' => undef,
		    'also' => undef,
		    'although' => undef,
		    'always' => undef,
		    'am' => undef,
		    'among' => undef,
		    'amongst' => undef,
		    'amoungst' => undef,
		    'amount' => undef,
		    'an' => undef,
		    'and' => undef,
		    'another' => undef,
		    'any' => undef,
		    'anyhow' => undef,
		    'anyone' => undef,
		    'anything' => undef,
		    'anyway' => undef,
		    'anywhere' => undef,
		    'are' => undef,
		    'around' => undef,
		    'as' => undef,
		    'at' => undef,
		    'back' => undef,
		    'be' => undef,
		    'became' => undef,
		    'because' => undef,
		    'become' => undef,
		    'becomes' => undef,
		    'becoming' => undef,
		    'been' => undef,
		    'before' => undef,
		    'beforehand' => undef,
		    'behind' => undef,
		    'being' => undef,
		    'below' => undef,
		    'beside' => undef,
		    'besides' => undef,
		    'between' => undef,
		    'beyond' => undef,
		    'bill' => undef,
		    'both' => undef,
		    'bottom' => undef,
		    'but' => undef,
		    'by' => undef,
		    'call' => undef,
		    'can' => undef,
		    'cannot' => undef,
		    'cant' => undef,
		    'co' => undef,
		    'computer' => undef,
		    'con' => undef,
		    'could' => undef,
		    'couldnt' => undef,
		    'cry' => undef,
		    'de' => undef,
		    'describe' => undef,
		    'detail' => undef,
		    'do' => undef,
		    'done' => undef,
		    'down' => undef,
		    'due' => undef,
		    'during' => undef,
		    'each' => undef,
		    'eg' => undef,
		    'eight' => undef,
		    'either' => undef,
		    'eleven' => undef,
		    'else' => undef,
		    'elsewhere' => undef,
		    'empty' => undef,
		    'enough' => undef,
		    'etc' => undef,
		    'even' => undef,
		    'ever' => undef,
		    'every' => undef,
		    'everyone' => undef,
		    'everything' => undef,
		    'everywhere' => undef,
		    'except' => undef,
		    'few' => undef,
		    'fifteen' => undef,
		    'fify' => undef,
		    'fill' => undef,
		    'find' => undef,
		    'fire' => undef,
		    'first' => undef,
		    'five' => undef,
		    'for' => undef,
		    'former' => undef,
		    'formerly' => undef,
		    'forty' => undef,
		    'found' => undef,
		    'four' => undef,
		    'from' => undef,
		    'front' => undef,
		    'full' => undef,
		    'further' => undef,
		    'get' => undef,
		    'give' => undef,
		    'go' => undef,
		    'had' => undef,
		    'has' => undef,
		    'hasnt' => undef,
		    'have' => undef,
		    'he' => undef,
		    'hence' => undef,
		    'her' => undef,
		    'here' => undef,
		    'hereafter' => undef,
		    'hereby' => undef,
		    'herein' => undef,
		    'hereupon' => undef,
		    'hers' => undef,
		    'herself' => undef,
		    'him' => undef,
		    'himself' => undef,
		    'his' => undef,
		    'how' => undef,
		    'however' => undef,
		    'hundred' => undef,
		    'i' => undef,
		    'ie' => undef,
		    'if' => undef,
		    'in' => undef,
		    'inc' => undef,
		    'indeed' => undef,
		    'interest' => undef,
		    'into' => undef,
		    'is' => undef,
		    'it' => undef,
		    'its' => undef,
		    'itself' => undef,
		    'keep' => undef,
		    'last' => undef,
		    'latter' => undef,
		    'latterly' => undef,
		    'least' => undef,
		    'less' => undef,
		    'ltd' => undef,
		    'made' => undef,
		    'many' => undef,
		    'may' => undef,
		    'me' => undef,
		    'meanwhile' => undef,
		    'might' => undef,
		    'mill' => undef,
		    'mine' => undef,
		    'more' => undef,
		    'moreover' => undef,
		    'most' => undef,
		    'mostly' => undef,
		    'move' => undef,
		    'much' => undef,
		    'must' => undef,
		    'my' => undef,
		    'myself' => undef,
		    'name' => undef,
		    'namely' => undef,
		    'neither' => undef,
		    'never' => undef,
		    'nevertheless' => undef,
		    'next' => undef,
		    'nine' => undef,
		    'no' => undef,
		    'nobody' => undef,
		    'none' => undef,
		    'noone' => undef,
		    'nor' => undef,
		    'not' => undef,
		    'nothing' => undef,
		    'now' => undef,
		    'nowhere' => undef,
		    'of' => undef,
		    'off' => undef,
		    'often' => undef,
		    'on' => undef,
		    'once' => undef,
		    'one' => undef,
		    'only' => undef,
		    'onto' => undef,
		    'or' => undef,
		    'other' => undef,
		    'others' => undef,
		    'otherwise' => undef,
		    'our' => undef,
		    'ours' => undef,
		    'ourselves' => undef,
		    'out' => undef,
		    'over' => undef,
		    'own' => undef,
		    'part' => undef,
		    'per' => undef,
		    'perhaps' => undef,
		    'please' => undef,
		    'put' => undef,
		    'rather' => undef,
		    're' => undef,
		    'same' => undef,
		    'see' => undef,
		    'seem' => undef,
		    'seemed' => undef,
		    'seeming' => undef,
		    'seems' => undef,
		    'serious' => undef,
		    'several' => undef,
		    'she' => undef,
		    'should' => undef,
		    'show' => undef,
		    'side' => undef,
		    'since' => undef,
		    'sincere' => undef,
		    'six' => undef,
		    'sixty' => undef,
		    'so' => undef,
		    'some' => undef,
		    'somehow' => undef,
		    'someone' => undef,
		    'something' => undef,
		    'sometime' => undef,
		    'sometimes' => undef,
		    'somewhere' => undef,
		    'still' => undef,
		    'such' => undef,
		    'system' => undef,
		    'take' => undef,
		    'ten' => undef,
		    'than' => undef,
		    'that' => undef,
		    'the' => undef,
		    'their' => undef,
		    'them' => undef,
		    'themselves' => undef,
		    'then' => undef,
		    'thence' => undef,
		    'there' => undef,
		    'thereafter' => undef,
		    'thereby' => undef,
		    'therefore' => undef,
		    'therein' => undef,
		    'thereupon' => undef,
		    'these' => undef,
		    'they' => undef,
		    'thick' => undef,
		    'thin' => undef,
		    'third' => undef,
		    'this' => undef,
		    'those' => undef,
		    'though' => undef,
		    'three' => undef,
		    'through' => undef,
		    'throughout' => undef,
		    'thru' => undef,
		    'thus' => undef,
		    'to' => undef,
		    'together' => undef,
		    'too' => undef,
		    'top' => undef,
		    'toward' => undef,
		    'towards' => undef,
		    'twelve' => undef,
		    'twenty' => undef,
		    'two' => undef,
		    'un' => undef,
		    'under' => undef,
		    'until' => undef,
		    'up' => undef,
		    'upon' => undef,
		    'us' => undef,
		    'very' => undef,
		    'via' => undef,
		    'was' => undef,
		    'we' => undef,
		    'well' => undef,
		    'were' => undef,
		    'what' => undef,
		    'whatever' => undef,
		    'when' => undef,
		    'whence' => undef,
		    'whenever' => undef,
		    'where' => undef,
		    'whereafter' => undef,
		    'whereas' => undef,
		    'whereby' => undef,
		    'wherein' => undef,
		    'whereupon' => undef,
		    'wherever' => undef,
		    'whether' => undef,
		    'which' => undef,
		    'while' => undef,
		    'whither' => undef,
		    'who' => undef,
		    'whoever' => undef,
		    'whole' => undef,
		    'whom' => undef,
		    'whose' => undef,
		    'why' => undef,
		    'will' => undef,
		    'with' => undef,
		    'within' => undef,
		    'without' => undef,
		    'would' => undef,
		    'yet' => undef,
		    'you' => undef,
		    'your' => undef,
		    'yours' => undef,
		    'yourself' => undef,
		    'yourselves' => undef,
		   };

### Main ######################################################################
my $q = new CGI;
my $mode = $q->param('mode');	# What to do: search, view, export et.c.
#my $search = $q->param('Search');
my $BiblioUrl = $q->url();

my $cpmid = $q->cookie($BiblioCookieName);
my @pmid = split(/,/, $cpmid);
if (defined $q->param('Keep All')) {
  @newpmids = split(/,/, $q->param('allnew'));
  @pmid = (@pmid, @newpmids);
  $q->delete('Keep All');
  $q->delete('allnew');
} elsif (defined $q->param('Keep Selected')) {
  @newpmids = $q->param('pmid');
  @pmid = (@pmid, @newpmids);
  $q->delete('Keep Selected');
  $q->delete('pmid');
} elsif (defined $q->param('refs')) {
  @pmid = split(/,/, $q->param('refs'));
  $q->delete('refs');
}


if (! defined $mode) {		# First entry
  entry_view($q, \@pmid);
} elsif ($mode eq 'view') {
  simple_view($q, \@pmid);
} elsif ($mode eq 'search') {
  do_search($q, \@pmid);
} elsif ($mode eq 'websearchcomposer') {
  do_web_search($q, \@pmid);
} elsif ($mode eq 'bibsearchcomposer') {
  compose_bib_search($q);
} elsif ($mode eq 'bibtex' || $mode eq 'text' || $mode eq 'html') {
  present_refs($q, $mode, \@pmid);
} elsif ($mode =~ /Send to (\S+)!/) {
  send_to_search_engine($q, $1);
} elsif ($mode eq 'clear') {
  @pmid = ();
  simple_view($q, \@pmid);
} elsif ($mode eq 'Drop') {
  drop_one($q, \@pmid);
} else {			# Huh?
  show_params($q);
}

### Subroutines for creating displays #########################################

# View at first entry
sub entry_view {
  my ($q, $pmid) = @_;
  my @urlpmid = $q->param('pmid');
  my $page = '';
  my $body = '';

  if (! @urlpmid) {
    if (scalar(@$pmid) > 0) {
      simple_view($q, $pmid);
      exit 0;
    } else {
      $page .= $q->header;
      $page .= $q->start_html(-title => "$Biblio - Welcome",
			      -style => {src => $BiblioStyleSheet});
      $body = $q->h1("Welcome to $Biblio")
	. $q->p("Search PubMed through the $Biblio interface!")
          . make_search_form($q);
    }
  } else {
    my $newcookie = $q->cookie(-name => $BiblioCookieName,
			       -value => join(',', @$pmid),
			      -expires => '+1y');
    $page .= $q->header(-cookie => $newcookie);
    $page .= $q->start_html(-title => "$Biblio - Welcome",
			    -style => {src => $BiblioStyleSheet});
    $body = $q->h1("Welcome to $Biblio")
          . make_simple_view($q) 
	  . $q->h2('&nbsp;Add references')
	  . make_search_form($q);
  }

  $page .= page_wrapper($q, $body, $pmid);
  $page .= cgi_variables($q);
  $page .= $q->end_html;

  print $page;
}

# Standard view, including search form
sub simple_view {
  my ($q, $pmid) = @_;
  my $page = '';
  my $main = '';

  print STDERR "Viewing: " . join(', ', @$pmid) . "\n";
  my $newcookie = $q->cookie(-name => $BiblioCookieName,
			     -value => join(',', @$pmid),
			      -expires => '+1y');
  $page .= $q->header(-cookie => $newcookie);
  $page .= $q->start_html(-title => $Biblio,
			  -style => {src => $BiblioStyleSheet});

  $main .= make_search_form($q);
  $main .= make_simple_view($q, $pmid);
  $page .= page_wrapper($q, $main, $pmid);
  $page .= cgi_variables($q);
  $page .= $q->end_html;

  print $page;
}

# View search results and working set of articles
sub do_search {
  my ($q, $pmid) = @_;
  my $page = '';
  my $outerpage = $q->header
    . $q->start_html(-title => "$Biblio - Search results",
		     -style => {src => $BiblioStyleSheet});

  my $narticles = $q->param('narticles');
  my $term = $q->param('term');
  if (!defined $term) {
    my $authors=$q->param('author');
    my $title=$q->param('title');
    my $journal=$q->param('journal');
    my $year=$q->param('year');

    if (defined $authors) {
      foreach $a (split(/,\s*/, $authors)) {
	$a =~ s/\s+/+/;
	push @termlist, "\"$a\"\[AU\]";
      }
    }
    if (defined $title) {
      foreach $a (split(/[^\w\d]+/, $title)) {
	if (!exists($common_words->{$a})) {
	  push @termlist, "\"$a\"\[TI\]";
	}
      }
    }
    if (defined $journal) {
      if (length($journal) > 0) {
	$journal =~ s/\s+/+/;
	push @termlist, "\"$journal\"\[TA\]";
      }
    }
    if (defined $year) {
      if ($year =~ /\d{4}/) {
	push @termlist, "$year\[DP\]";	
      }
    }
    if (scalar(@termlist) == 0) {
      $page .= $q->p('Bad search parameters');
    } else {
      $term = join('+AND+', @termlist);
    }
  }
  my $results = query_pubmed({'tool' => $Biblio,
			      'dispmax' => $narticles,
			      'term' => $term});
  my $new_pmids = extract_pmids($results);

  if (!defined $new_pmids) {
    $page .= $q->p('Search error!');
  } elsif (scalar(@$new_pmids) == 0) {
    $page .= $q->p("No matching citations found. ($term)");
  } else {
    my $arts_h = cached_get_pmids($new_pmids);
    my %labels=();
    foreach $id (@$pmid) {
      print STDERR "Checking $id";
      if (exists $arts_h->{$id}) {
	delete $arts_h->{$id};
	print STDERR "Dropped.\n";
      }
    }
    print STDERR "\n";
    if (scalar(keys  %$arts_h) == 0) {
      $page .= $q->h3('Matching citations found, but you already have them listed.');
      $page .= make_simple_view($q);
    } else {
      foreach $a (keys %$arts_h) {
	$labels{$a} = art2html($arts_h->{$a}, undef);
      }
      $page .= $q->h1('Search results');
      $page .= $q->start_form;
      my $oldescape = $q->autoEscape(undef);
      $page .= $q->checkbox_group(-name => 'pmid',
				  -values=> \%labels,
				  -linebreak=>'true',
				  -labels=>\%labels);
      $q->autoEscape($oldescape);

      $page .= $q->submit(-name => 'Keep Selected');
      $page .= $q->submit(-name => 'Keep All');
      $page .= $q->submit(-name => 'Cancel');
      $page .= $q->hidden('allnew', join(',', keys(%labels)));
      $q->param('mode', 'view');
      $page .= $q->hidden(-name =>'mode');
      $page .= $q->end_form;
    }
  }

  $outerpage .= page_wrapper($q, $page, $pmid);
  $outerpage .= cgi_variables($q);
  $outerpage .= $q->end_html;

  print $outerpage;
}


sub do_web_search {
  my ($q, $pmid) = @_;
  my $main = '';

  my @urlpmid = split(/,/, $q->param('id'));
  if (scalar(@urlpmid) > 0) {
    $pmid = \@urlpmid;
  }


  if (! @$pmid) {
    $main .= $q->h3('No articles no compose the search from!');
    $main .= make_simple_view($q);
  } else {
    # First gather words. We would like author names to be preselected.
    my $art_h = cached_get_pmids($pmid);
    my %auth=();
    my %tit=();
    my %words=();
    my $elem;
    foreach $a (keys %$art_h) {
      my $art = $art_h->{$a};
      $elem = $art->{'AU'};
      if (defined $elem) {
	foreach $author (@$elem) {
	  if ($author =~ /(.+)\s+\S+/) {
	    $author = $1;
	  }
	  $auth{$author} = 1;
	}
      }
      $elem = $art->{'TI'};
      if (defined $elem) {
	foreach $str (split(/[^\w\d]+/, $elem)) {
	  $str = lc($str);
	  if (length($str) > 2
	      && !exists $common_words->{$str}) {
	    $tit{$str} = 1;
	  }
	}
      }
      $elem = $art->{'AB'};
      if (defined $elem) {
	foreach $str (split(/[^\w\d]+/, $elem)) {
	  $str = lc($str);
	  if (length($str) > 2
	      && !exists $common_words->{$str}) {
	    $words{$str} = 1;
	  }
	}
      }
    }
    my @authlist = sort(keys %auth);
    my @titlist = sort(keys %tit);
    my @wordlist = sort(keys %words);

    $main .= $q->h1('Compose web search');
    $main .= $q->p("Choose the words you want to submit to the search engine! Google doesn't want too many words, so $Biblio will keep at most $MaxNSearchWords chosen arbitrarily.");
    $main .= $q->start_form();
    $main .= $q->submit(-name => 'mode',
			-value => 'Send to Google!');
    $main .= $q->submit(-name => 'mode',
			-value => 'Send to Google Scholar!');
    $main .= $q->submit(-name => 'mode',
			-value => 'Send to ResearchIndex!');
    $main .= $q->h3('Authors');
    $main .= $q->checkbox_group(-name => 'searchwords',
				-values => \@authlist,
				-default => \@authlist);
    $main .= $q->h3('Title words');
    $main .= $q->checkbox(-name => 'usealltitlewords',
			  -value => join(',', @titlist),
			  -label => 'Use all title words!');
    $main .= $q->p();
    $main .= $q->checkbox_group(-name => 'searchwords',
				-values => \@titlist);
    $main .= $q->h3('Words in abstract');
    $main .= $q->checkbox_group(-name => 'searchwords',
				-values => \@wordlist);
    $main .= $q->end_form();
  }

  my $page = $q->header 
    . $q->start_html(-title => "$Biblio - Web Search",
		     -style => {src => $BiblioStyleSheet});

  $page .= page_wrapper($q, $main, $pmid);
  $page .= cgi_variables($q);
  $page .= $q->end_html;

  print $page;
}


# Redirect a search request to a web search engine
sub send_to_search_engine {
  my ($q, $searchengine) = @_;
  my @words = $q->param('searchwords');
  my $alltitlewords = $q->param('usealltitlewords');
  my @words2 = ();

  if (! @words && !defined $alltitlewords) {
    show_params($q);
  } else {
    if (defined $alltitlewords) {
      @words2 = split(/,/, $alltitlewords);
    }
    @words = (@words, @words2); 
    if (scalar(@words) > $MaxNSearchWords) {
      @words = @words[0..$MaxNSearchWords-1];
    }
    if ($searchengine eq 'Google') {
      my $url = "$Google?q=" . join('+', @words);
      print $q->redirect(-uri => $url);
    if ($searchengine eq 'Google Scholar') {
      my $url = "$Scholar?q=" . join('+', @words);
      print $q->redirect(-uri => $url);
    } elsif ($searchengine eq 'ResearchIndex') {
      my $url = "$ResearchIndex?q=" . join('+', @words);
      print $q->redirect(-uri => $url);
    }
  }
}


# Show bibtex/text/html for the accumulated articles
# In:  A CGI object
# Out: A page
sub present_refs {
  my ($q, $mode, $pmids) = @_;
  my $bib='';

  my @urlpmid = split(/,/, $q->param('id'));
  if (scalar(@urlpmid) > 0) {
    $pmids = \@urlpmid;
  }

  if (! @$pmids) {
    $bib = "No references to convert yet.\n";
  } else {
    my $art_h = cached_get_pmids($pmids);
#    $bib = $q->start_pre();
    foreach $id (keys %$art_h) {
      if ($mode eq 'bibtex') {
	$bib .= make_bibtex_citation($art_h->{$id}) . "\n";
      } elsif ($mode eq 'text') {
	$bib .= make_text_citation($art_h->{$id}) . "\n";
      } elsif ($mode eq 'html') {
	$bib .= make_html_citation($art_h->{$id}) . "<br>\n";
      }
    }
#    $bib .= $q->end_pre();
  }
  my $page = $q->header(-type => 'text/plain')
           . $bib;
  print $page;
}


# In:  A CGI object
# Out: A HTML for composing a query for PubMed based on a present 
#      article template.
sub compose_bib_search {
  my $q = shift @_;
  my $page = $q->header;
  my $template = $q->param('template');
  my $art_h = cached_get_pmids([$template]);

  $page .= $q->start_html(-title => "$Biblio - Compose a search",
			  -style => {src => $BiblioStyleSheet});
  $page .= page_wrapper($q, $q->h1("Compose a search")
  			    . $q->p('The search fields are filled in with values from the article you chose.')
			. make_search_form($q, $art_h->{$template}));
  $page .= cgi_variables($q);
  $page .= $q->end_html;

  print $page;

}


# For debugging purposes etc
sub show_params {
  my $q = shift @_;
  my @pmid = $q->param('pmid');
  my $page = $q->header . $q->start_html;

  $page .= $q->h1('Parameters');
  $page .= cgi_variables($q);
  $page .= $q->end_html;

  print $page;
}

### Helpers ###################################################################

sub make_search_form {
  my ($q, $art) = @_;
  my $page = "\n";
  my ($authors, $title, $journal, $year) = ('','','','');

  if (defined $art) {
    $authors = join(', ', @{$art->{'AU'}});
    $title = $art->{'TI'};
    $journal = $art->{'TA'};
    $year = $art->{'DP'};
  }

  $page .= $q->start_table({-width => '100%',
#			    -border => '1'
			   });
  # First a simple search system
  $page .= $q->start_form();
  $page .= $q->start_Tr();
  $page .= $q->start_th({-colspan => 6, -align => 'left'}) . "Simple search\n";
  $page .= $q->start_Tr();
  $page .= $q->td("Term ") . "\n";
  $page .= $q->td({-colspan => 3},
		  $q->textfield(-name => 'term',
				-default => $authors,
				-size => '60'));
  $page .= $q->td($q->popup_menu(-name => 'narticles',
				 -values => ['10', '20', '40', '60', '80', '100'],
				 -default => '20'));
  $page .= $q->td($q->submit(-name => 'Search'));
  $page .= $q->end_Tr();
  $q->param('mode', 'search');
  $page .= $q->hidden(-name => 'mode');
#   if (defined $q->param('pmid')) {
#     $page .= $q->hidden(-name => 'pmid', $q->param('pmid'));
#   }
  $page .= $q->end_form;

  # Then an advanced form, more simple than PubMed advanced though
  $page .= $q->start_form()
         . $q->start_Tr()
         . $q->th({-colspan => 6, -align => 'left'},
		  'Complex search') . "\n"
         . "\n" . $q->start_Tr()
	 . $q->td('Author(s) ') . "\n"
         . $q->td({-colspan => '4'},
		  $q->textfield(-name => 'author',
				-default => $authors,
				-size => '70'))
	 . $q->td($q->submit(-name => 'Search'))
	 . "\n" . $q->start_Tr()
         . $q->td('Title words ') . "\n"
	 . $q->start_td({-colspan => '5'}) . $q->textfield(-name => 'title',
							   -default => $title,
							   -size => '70')
	 . "\n" . $q->start_Tr()
	 . $q->td('Journal ')
	 . $q->td($q->textfield(-name => 'journal',
				-default => $journal,
				-size => '30'))
	 . $q->td('Year ')
	   . $q->td($q->textfield(-name => 'year',
				  -default => $year,
				  -size=> '4',
				  -maxlength=> '4'));
  $page .= $q->td('Max # hits')
    . $q->td($q->popup_menu(-name => 'narticles',
			    -values => ['10', '20', '40', '60', '80', '100'],
			    -default => '20'));
  $page .= $q->end_table();
#   if (defined $q->param('pmid')) {
#     $page .= $q->hidden(-name => 'pmid', $q->param('pmid'));
#   }
  $q->param('mode', 'search');
  $page .= $q->hidden(-name => 'mode');
  $page .= $q->end_form . "\n";

  return $page;
}


# Out: A simple listing of accumulated articles
sub make_simple_view {
  my ($q, $pmid) = @_;
  my $main = '';

  if (! @$pmid) {
    $main .= $q->p("No references accumulated yet.\n");
  } else {
    $main .= $q->h2('&nbsp;Reference list');
    my $art_h = cached_get_pmids($pmid);
    $main .= $q->start_table();
    foreach $i (@$pmid) {
      $main .= $q->Tr($q->td(art2html($art_h->{$i}, 'true'))) . "\n";
    }
    $main .= $q->end_table();
  }
  return $main;
}


# Out: The standard page header string
#
sub pageheader {
  my $q = shift @_;
  return $q->div({-class => 'logo'},
		 $q->a({-href => $BiblioUrl}, 
		       $q->img({-src => $BiblioLogoURL,
				-alt => 'Biblio',
			        -border => '0'}))) . $q->br();
}

# Out: The standard page foot string
#
sub footer {
  return "
 <address>
   For bug reports, feature requests, wild praise, et.c., please contact
   <a href=\"mailto:$MaintainerEmail\">$Maintainer</a>
 </address>
";
}

# Out: A string containing HTML for the left side tool links
sub make_toolset {
  my ($q, $pmid) = @_;
  my $bibtexlink = '';
  my $websearchlink = '';
  my $settools='';
  my $exporttools = '';
  my $textlink = '';
  my $thispage = '';
  my $gentools = '';

  if (scalar(@$pmid) > 0) {
    my $pmidstr = join(',', @$pmid);

    $q->param('mode', 'clear');
    my $newsetlink =$q->div({-class => 'meny'},
			    $q->a({-href => $q->self_url}, 'Clear list'));
    $gentools = $q->h3('&nbsp;Tools') . "
      <table><tr><td>$newsetlink</table>";

    $q->param('mode', 'bibtex');
    $bibtexlink = $q->div({-class => 'meny'},
			  $q->a({-href => $q->self_url}, 'BibTeX'));

    $q->param('mode', 'text');
    $textlink = $q->div({-class => 'meny'},
			$q->a({-href => $q->self_url}, 'Text'));

    $q->param('mode', 'html');
    $htmllink = $q->div({-class => 'meny'},
			$q->a({-href => $q->self_url}, 'HTML'));

    $thispage = $q->div({-class => 'meny'},
			$q->a({-href => "$BiblioUrl?refs=$pmidstr"},
			      "$Biblio link"));

    $settools = $q->h3('&nbsp;Converters') . "
<table><tr><td>$bibtexlink
<tr><td>$textlink
<tr><td>$htmllink
<tr><td>$thispage
</table>
";

    $pubmedlink = $q->a({-href => make_pubmed_url($pmidstr)},
			 'PubMed');
    $q->param('mode', 'websearchcomposer');
    $websearchlink = $q->div({-class => 'meny'},
			     ($q->a({-href => $q->self_url
				             . "&template=$pmidstr"},
				    'WebSearch')));

    $exporttools = $q->h3('&nbsp;Export to...')
      . "<table>
           <tr><td>$pubmedlink
           <tr><td>$websearchlink
         </table>";
  }


  return "\n" 
    . pageheader($q)
    . $gentools
    . $settools
    . $exporttools
    . $q->h3('&nbsp;Information')
    . $q->a({-href => '/biblio/manual/',
	    -target=> '_blank'}, 'Manual')
    . '<br>'
    . $q->a({-href => 'http://www.ncbi.nlm.nih.gov/entrez/utils/utils_index.html',
	     -target => '_blank'}, 'Entrez Utilities');
}

# Wrap a simple page into a frame (table-based) of related links et.c.
# In:  The CGI object and a string with the simple page HTML.
# Out: A string with complex HTML.
sub page_wrapper {
  my ($q, $simple, $pmid) = @_;
  my $page = $q->table({-class => 'layout',
#			-border => '1',
			-width=> '100%'},
			$q->Tr([$q->td({-valign => 'top'},
				       [make_toolset($q, $pmid), $simple]),
				$q->td({-colspan => '2'}, footer())])
		       );
  return $page;
}

#
# In:  A ref to a hash with article info, Medline based
# Out: A text string
#
sub make_text_citation {
  my $art=shift @_;
  my $str='';

  my $elem = $art->{'AU'};	# Author
  if (defined $elem) {
    my $astr = join(', ', @$elem);
    if (length($astr) > $MaxAuthorStringLength) {
      $astr = $elem->[0] . ' et al';
    }
    $str .= $astr;
  }

  $elem = $art->{'DP'};		# Date published, typically "1997 Dec"?
  my ($year, $month);
  if (defined $elem) {
    if ($elem =~ /(\d\d\d\d)\s(\w\w\w)/) {
      $year = $1;
      $month = $2;
    } else {
      $year = $elem;
    }
    $str .= " ($year) ";
  }

  $elem = $art->{'TI'};		# Title
  if (defined $elem) {
    $str .= "\"$elem\"";
  }

  $elem = $art->{'TA'};		# Journal
  if (defined $elem) {
    $str .= " $elem";
  }

  $elem = $art->{'VI'};		# Volume
  if (defined $elem) {
    $str .= " $elem";
  }

  $elem = $art->{'IP'};		# Issue
  if (defined $elem) {
    $str .= "($elem)";
  }

  $elem = $art->{'PG'};		# Pages
  my ($from, $to);
  if (defined $elem) {
    if ($elem =~ /(\d+)-(\d)/) {
      $from = $1;
      $to = substr($from, 0, -length($2)) . $2;
      $str .= ", $from--$to";
    } else {
      $str .= ", $elem";
    }
  }

  return $str;
}


#
# In:  A ref to a hash with article info, Medline based
# Out: An HTML string
#
sub make_html_citation {
  my $art=shift @_;
  my $str='';

  my $elem = $art->{'AU'};	# Author
  if (defined $elem) {
    my $astr = join(', ', @$elem);
    if (length($astr) > $MaxAuthorStringLength) {
      $astr = $elem->[0] . CGI::em(' et al');;
    }
    $str .= CGI::strong($astr);
  }
#  print STDERR "\n'$str'\n";
  $elem = $art->{'DP'};		# Date published, typically "1997 Dec"?
  my ($year, $month);
  if (defined $elem) {
    if ($elem =~ /(\d\d\d\d)\s(\w\w\w)/) {
      $year = $1;
      $month = $2;
    } else {
      $year = $elem;
    }
    $str .= " ($year) ";
  }

  $elem = $art->{'TI'};		# Title
  if (defined $elem) {
    $str .= CGI::em($elem);
  }

  $elem = $art->{'TA'};		# Journal
  if (defined $elem) {
    $elem =~ s/ /&nbsp;/;
    $str .= " $elem";
  }

  $elem = $art->{'VI'};		# Volume
  if (defined $elem) {
    $str .= " $elem";
  }

  $elem = $art->{'IP'};		# Issue
  if (defined $elem) {
    $str .= "($elem)";
  }

  $elem = $art->{'PG'};		# Pages
  my ($from, $to);
  if (defined $elem) {
    if ($elem =~ /(\d+)-(\d)/) {
      $from = $1;
      $to = substr($from, 0, -length($2)) . $2;
      $str .= ", $from&#8212;$to";
    } else {
      $str .= ", $elem";
    }
  }

  return $str;
}


# In:  Button string, button URL, new-frame-indicator (same frame if undef)
# Out: Button HTML
sub article_button {
  my ($bstr, $url, $newframe) = @_;
  my $linkdata = {-href => $url};

  if (defined $newframe) {
    $linkdata->{'-target'} = '_blank';
  }
  my $html = CGI::span({-class => 'articlebutton',
			-id => "${bstr}Button"},
		       CGI::a($linkdata, "&gt;$bstr"));
  return $html;
}


#
# In:  A ref to a hash with article info, Medline based
# Out: An HTML string
#
sub art2html {
  my ($art, $dodrop) = @_;
  my $str='';

  $str = make_html_citation($art);

  my $pmid = $art->{'PMID'};

  my $remove_button = '';
  if (defined $dodrop) {
    $q->param('mode', 'Drop');
    $q->param('victim', $pmid);
    $remove_button = CGI::span({-class => 'articlebutton',
				   -id => 'RemoveButton'},
				  CGI::a({-href => $q->self_url}, 'Drop!'));
    $q->delete('victim');
  }

  my $pubmedlink = article_button('PubMed',
				  make_pubmed_url($pmid),
				  'true');
  my $searchlink = article_button('WebSearch',
				  $q->url(-relative=>1) . "?mode=websearchcomposer&id=$pmid",
				  'true');
  $q->param('mode', 'bibsearchcomposer');
  my $bibliosearchlink = article_button('BibSearch',
					$q->self_url . "&template=$pmid",
					undef);
  my $bibtexlink = article_button('BibTeX',
				  $q->url(-relative=>1) . "?mode=bibtex&id=$pmid",
				  'true');
  my $links = CGI::div({-class => 'articlelinks'},
		       $remove_button . "&nbsp;&nbsp;&nbsp;" .
		       $bibtexlink . "&nbsp;" .
		       $pubmedlink . "&nbsp;" .
		       $searchlink . "&nbsp;" .
		       $bibliosearchlink);
 $str .= $links;
#   my $links = CGI::table({-class => 'table.links'},
# 			 CGI::Tr(CGI::td($pubmedlink),
# 				 CGI::td($searchlink),
# 				 CGI::td($bibliosearchlink),
# 				 CGI::td($bibtexlink)));
#   $str = $links . $str;
  return $str;
}


# In:  Article data hash
# Out: A string with a bibtex citation
sub make_bibtex_citation {
  my $art=shift @_;
  my @strl=();
  my $elem=undef;
  my $key=undef;
  my $author=undef;

  $elem = $art->{'AU'};
  if (defined $elem) {
    if ($elem->[0] =~ /(\S+)(\s*\w*)/) {
      $key=$1 . $art->{'PMID'};
    } else {
      $key=$art->{'PMID'};
    }
    @authorl = ();
    foreach $a (@$elem) {
      if ($a =~ /(\S+(\s\S)*)\s+(\w+)/) {
	$lname = $1;
	$initials = $3;
      } elsif ($a =~ /\S+/) {
	$lname = $a;
	$initials = undef;
      }
      if (defined $initials) {
	$initials =~ s/(\w)/$1\. /g;
	push @authorl, "$initials$lname";
      } else {
	push @authorl, "$lname";
      }
    }
    $author = join(' and ', @authorl);
  } else {
    $key=$art->{'PMID'};
  }
  push @strl, "\@article{$key";
  if (defined $author) {
    push @strl, "author = {$author}";
  }

  $elem = $art->{'TI'};
  if (defined $elem) {
    push @strl, "title = {$elem}";
  }

  $elem = $art->{'TA'};
  if (defined $elem) {
    push @strl, "journal = {$elem}";
  }

  $elem = $art->{'VI'};
  if (defined $elem) {
    push @strl, "volume = {$elem}";
  }

  $elem = $art->{'IP'};
  if (defined $elem) {
    push @strl, "number = {$elem}";
  }

  $elem = $art->{'DP'};		# Date published, typically "1997 Dec"?
  my ($year, $month);
  if (defined $elem) {
    if ($elem =~ /(\d\d\d\d)\s(\w\w\w)/) {
      my $year = $1;
      my $month = $2;
      push @strl, "year = {$year}";
      push @strl, "month = {$month}";
    } else {
      my $year = $elem;
      push @strl, "year = {$year}";
    }
  }

  $elem = $art->{'PG'};
  if (defined $elem) {
    my ($from, $to);
    if ($elem =~/^(\d+)-(\d)$/) {
      $from = $1;
      $to = substr($from, 0, -length($2)) . $2;
      push @strl, "pages = {$from-$to}";
    } else {
      push @strl, "pages = {$elem}";
    }
  }

  $elem = $art->{'AB'};
  if (defined $elem) {
#    $elem =~ /((\S+\s+){5})\S+/;
#    print STDERR "'$1'\n";
#    $elem =~ s/((\S+\s+){9}\S+\s+)/$1\n/g;
    $elem =~ s/((\S|\s){60}\S+)\s+/$1\n/g;
    push @strl, "abstract = {$elem}";
  }

  return join(",\n\t", @strl) . "\n}\n";
}


#
#
sub drop_one {
  my ($q, $pmid) = @_;
  my $victim = $q->param('victim');

  my @newpmid = ();
  foreach my $i (@$pmid) {
    if ($i != $victim) {
      push @newpmid, $i;
    }
  }
  $pmid = \@newpmid;
  if (scalar(@newpmid) > 0) {
    simple_view($q, $pmid);
  } else {
    entry_view($q, $pmid);
  }
}

##
# For debugging
sub cgi_variables {
  if (defined $debug) {
    my $q = shift @_;
    $q->Dump();
  }
}

