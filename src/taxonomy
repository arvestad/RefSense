#! /usr/bin/perl -w

=pod

=head1 NAME

taxonomy - Access NCBI's taxonomy resource

=head1 SYNOPSIS

    taxonomy [<options>] <search terms>+

=head2 OPTIONS

-u, -h, and --help returns this text!

=head1 DESCRIPTION

=head2 Search Terms

Scientific of common name.

=cut


use Data::Dumper;
use PubMed;
use Citation;

use Pod::Usage;
use Pod::Text;

use XML::Simple;

if (@ARGV == 0) {
  pod2usage();
}


### Support for taxcomplete ####################
my %known_taxa = ();
my %new_taxa = ();
my $taxafile = "$ENV{HOME}/.refsense_taxonomy";
sub load_known_taxa {
  open(F, "<$taxafile")
    || exit(0);

  while (<F>) {
    chomp;
    $known_taxa{$_} = undef;
  }
  close(F);
}

sub register_taxa {
  my $taxa = shift;
  if ($taxa =~ m/\ /) {
    $taxa = "\"$taxa\"";
  }
#  print STDERR "==> $taxa\n";
  if (!exists $known_taxa{$taxa}) {
    $new_taxa{$taxa} = undef;
  }
}

sub save_new_taxa {
  open(A, ">>$taxafile") || exit(0);
  foreach $t (keys %new_taxa) {
    print A $t, "\n";
  }
  close(A);
}


### Main starts here ############################
my @searchterms=();
load_known_taxa();

while (my $opt = shift @ARGV) {
  if ($opt eq '-u' || $opt eq '-h' || $opt eq '--help') {
    pod2usage(-verbose=>2);
    exit 0;
  }

  push @searchterms, $opt;  
}

my $term = join('+OR+', @searchterms);
my $def_query = {'term' => $term,
		 'db'   => 'taxonomy',
		 'rettype' => 'xml'};


my $res = pm_query($def_query);
#print STDERR "Results:\n", Dumper($res), "\n";
if (! defined $res) {
  print STDERR "An error occured. Please correct your search terms or try again later.\n";
  exit 1;
}


my $data = XMLin($res, GroupTags => {IdList => Id});

if (scalar($data->{IdList}) == 0) {
  print STDERR "No matching species or lineages.\n";
  exit 2;
}

if (exists $data->{ErrorList}) {
#if (scalar($data->{ErrorList}) > 0) {
#  print STDERR Dumper($data->{ErrorList}{PhraseNotFound});
  my $phraselist = $data->{ErrorList}{PhraseNotFound};
  print STDERR "Error: The following items were not recognized.\n";
  if (ref($phraselist) eq 'ARRAY') {
    for my $i (@$phraselist) {
      print STDERR "\t$i\n";
    }
    print STDERR "\n";
  } else {
    print STDERR "\t$phraselist\n";
  }
}

my $fetch_params = {'db' => 'taxonomy',
		    'retmode' => 'text',
		    'report' => 'xml',
		    'id' => $data->{IdList}};
$res = pm_fetch($fetch_params);
#print STDERR Dumper($res), "\n";

my $ignore_detailed_lineage_nodes = 0;
if (defined $$res && length($$res) > 0) {
  @strarray = split("\n", $$res);
  foreach my $s (@strarray) {
    if ($s =~ m/<ScientificName>(.+)<\/ScientificName>/) {
      if ($ignore_detailed_lineage_nodes) {
	next;
      } else {
	print "Scientific Name: $1\n";
	register_taxa($1);
      }
    } elsif ($s =~ m/CommonName>(.+)<\/\S*CommonName>/) { # GenbankCommonName or CommonName
      print "    Common Name: $1\n";
      register_taxa($1);
    } elsif ($s =~ m/<Rank>(.+)<\/Rank>/) {
      if ($ignore_detailed_lineage_nodes) {
	next;
      } else {
	if ($1 ne 'no rank') {
	  print "           Rank: $1\n";
	}
      }
    } elsif ($s =~ m/<Division>(.+)<\/Division>/) {
      print "       Division: $1\n";
    } elsif ($s =~ m/<Lineage>(.+)<\/Lineage>/) {
      print "        Lineage: $1\n";
    } elsif ($s =~ m/<LineageEx>/) {
      $ignore_detailed_lineage_nodes = 1;
    } elsif ($s =~ m/<\/LineageEx>/) {
      $ignore_detailed_lineage_nodes = 0;
    } elsif ($s =~ m/<\/Taxon>/) {
      if ($ignore_detailed_lineage_nodes) {
	next;
      } else {
	print "\n";
      }
    }
  }
}
save_new_taxa();
exit 0;

